#!/bin/bash
#
# Copyright 2020 Red Hat, Inc.
#
# NAME
#     lab-secure-review - lab script for GE 2.4 on restful services
#
# SYNOPSIS
#     lab-secure-review {start|finish}
#
#        start - verify prerequisites lab
#        finish - removes the resources and files created for lab
#        grade - grades the activity
#
# DESCRIPTION
#     This script is used to start or conclude the chapter 8 section 5 lab.
#
# CHANGELOG
#   * Wed Dec 22 2020 Manuel Aude <maudemor@redhat.com>
#   - Initial commit


PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin

# Initialize and set some variables
run_as_root='true'

# Required by the do283 shlib
this='secure-review'
title='Lab: Securing Quarkus Microservices.'

declare -a valid_commands=(start finish grade)

function lab_start {
  ocp4_print_setup_header
  ocp4_grab_lab_files

  start_postgres_database
  start_keycloak

  ocp4_print_setup_footer

}

function start_postgres_database {
    pad2 "Starting PostgreSQL container"
    spinner_wait "podman run -d --name \"${this}-postgresql-conference\" -p 5432:5432 --replace\
      -e POSTGRESQL_PASSWORD=confi_user \
      -e POSTGRESQL_USER=conference_user \
      -e POSTGRESQL_ADMIN_PASSWORD=conference \
      -e POSTGRESQL_DATABASE=conference registry.access.redhat.com/rhscl/postgresql-10-rhel7:1"
}

function start_keycloak {
    pad2 "Starting Keycloak container"
    spinner_wait "cd ${solutions}/${this} && ./start-keycloak.sh"
}

function lab_finish {

  ocp4_print_cleanup_header
  remove_keycloak
  remove_postgres_database
  ocp4_cleanup_lab_files

  ocp4_print_cleanup_footer

}

function remove_postgres_database {
  pad2 "Stopping PostgreSQL container"
  SUCCESS_if_exitcode "podman rm -f \"${this}-postgresql-conference\""
}


function remove_keycloak {
  pad2 "Stopping Keycloak container"
  SUCCESS_if_exitcode "podman rm -f kc"
}

function lab_grade {
  ocp4_print_grade_header

  pushd ${labs}/${this}/
  user1_token=$(${solutions}/${this}/keycloak-token.sh localhost:8882 quarkus backend-service user1 user1 secret)
  user2_token=$(${solutions}/${this}/keycloak-token.sh localhost:8882 quarkus backend-service user2 user2 secret)
  popd
  #We verify JWT first, because if JWT fails, our validation method for mTLS would also fail, but because of JWT
  # And not because of the mTLS configuration.

  pad2 "Reject unauthenticated requests"
  status_code_unauthorized=$(curl -k -o /dev/null -w "%{http_code}" https://127.0.0.1:8445/sessions/)
  PASS_if_equals "${status_code_unauthorized}" "401"

  pad2 "Allow authenticated requests (user1)"
  status_code_auth=$(curl -o /dev/null -w "%{http_code}" -k https://127.0.0.1:8445/sessions/ -H 'Content-Type: application/json' -H "Authorization: Bearer ${user1_token}")
  PASS_if_equals "${status_code_auth}" "200"

  pad2 "Allow authenticated requests (user2)"
  status_code_auth=$(curl -o /dev/null -w "%{http_code}" -k https://127.0.0.1:8445/sessions/ -H 'Content-Type: application/json' -H "Authorization: Bearer ${user2_token}")
  PASS_if_equals "${status_code_auth}" "200"

  pad2 "Allow user1 create sessions"
  status_code_valid_post=$(curl -o /dev/null -w "%{http_code}" -X POST -d '{"id":"a123","schedule":2,"speakers":[]}' \
    -k https://127.0.0.1:8445/sessions/ \
    -H 'Content-Type: application/json' -H "Authorization: Bearer ${user1_token}")
  PASS_if_equals "${status_code_valid_post}" "200"

  pad2 "Allow user1 modify sessions"
  status_code_valid_put=$(curl -o /dev/null -w "%{http_code}" -X PUT -d '{"id":"a123","schedule":3,"speakers":[]}' \
    -k https://127.0.0.1:8445/sessions/a123 \
    -H 'Content-Type: application/json' -H "Authorization: Bearer ${user1_token}")
  PASS_if_equals "${status_code_valid_put}" "200" 

  pad2 "Allow user1 delete sessions"
  status_code_valid_delete=$(curl -o /dev/null -w "%{http_code}" -X DELETE \
  -k https://127.0.0.1:8445/sessions/a123 \
  -H 'Content-Type: application/json' -H "Authorization: Bearer ${user1_token}")
  FAIL_if_equals "${status_code_valid_delete}" "403" 

  pad2 "Reject user2 create sessions"
  status_code_valid_post=$(curl -o /dev/null -w "%{http_code}" -X POST -d '{"id":"a123","schedule":2,"speakers":[]}' \
    -k https://127.0.0.1:8445/sessions/ \
    -H 'Content-Type: application/json' -H "Authorization: Bearer ${user2_token}")
  PASS_if_equals "${status_code_valid_post}" "403" 

  pad2 "Reject user2 update sessions"
  status_code_valid_put=$(curl -o /dev/null -w "%{http_code}" -X PUT -d '{"id":"a123","schedule":3,"speakers":[]}' \
    -k https://127.0.0.1:8445/sessions/a123 \
    -H 'Content-Type: application/json' -H "Authorization: Bearer ${user2_token}")
  PASS_if_equals "${status_code_valid_put}" "403" 

  pad2 "Reject user2 delete sessions"
  status_code_valid_delete=$(curl -o /dev/null -w "%{http_code}" -X DELETE \
    -k https://127.0.0.1:8445/sessions/a123 \
    -H 'Content-Type: application/json' -H "Authorization: Bearer ${user2_token}")
  PASS_if_equals "${status_code_valid_put}" "403" 

  # Calling microservice-speaker, without using a client certificate, should fail.
  pad2 "Reject unauthenticated clients to microservice-speaker"
  if curl https://localhost:8444/; then
    print_FAIL
  else
    print_PASS
  fi

  # And yet, microservice-session should be able to call it, because they are configured to communicate via mTLS
  pad2 "Validate intra-services communication"
  output_session_speaker=$(curl -s -k https://127.0.0.1:8445/sessions/s-1-1 -H 'Content-Type: application/json' -H "Authorization: Bearer ${user1_token}")
  if [[ "${output_session_speaker}" == *"Emmanuel Bernard"* ]]; then
    print_PASS
  else
    print_FAIL
  fi
  
  ocp4_print_grade_footer
}

############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"